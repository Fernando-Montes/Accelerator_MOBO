import numpy as np
import matplotlib.pyplot as plt

import logging

from . import pareto_tools as PT
from . import EI_tools as EIT
from . import optimization as opt
from .. import Constraints

class MultiObjectiveBayesianOptimizer:
    def __init__(self,inputs):

        #check arguments
        req_args = ['bounds','GPRs','r','X','F']
        for arg in req_args:
            if not arg in inputs.keys():
                raise RuntimeError(f'argument "{arg}" not found but is required')

        
        self.bounds           = inputs.get('bounds')
        self.GPRs             = inputs.get('GPRs')
        self.A                = inputs.get('A')
        self.r                = inputs.get('r')

        self.X                = inputs.get('X')
        self.F                = inputs.get('F')

        self.constraints      = inputs.get('constraints')

        assert isinstance(self.constraints,list)
            
            
        self.input_dim        = len(self.bounds)
        self.obj_dim          = len(self.GPRs)

        #get intital PF and initial hypervolume
        self.PF               = self.get_PF()
        self.hypervolume      = np.array((self.get_hypervolume()))


    def add_observation(self,X,F,C=None):
        self.X = np.vstack((self.X,X))
        self.F = np.vstack((self.F,F))

        if isinstance(C,np.ndarray):
            self.C = np.vstack((self.C,C))     
        
    def fit_GP(self):
        for i in range(self.obj_dim):
            self.GPRs[i].fit(self.X,self.F[:,i])

    def get_PF(self):
        s = PT.get_PF(self.F)
        return PT.sort_along_first_axis(s)[::-1]

    def get_hypervolume(self):
        return PT.get_hypervolume(self.PF)
    

        
        
        




        
