import numpy as np

import logging
import multiprocessing

from . import base

class LineOpt(BlackBoxOptimizer):
    '''LineOptimizer class

    This optimizer uses a variation of the LineOptimizer method found in 
    https://arxiv.org/pdf/1902.03229.pdf.

    Essentially it optimizes the function f in a 1D subdomain, 
    which is selected using an 'oracle' which determines the subspace
    (see lineBO/oracles.py)

    Is this method actually better than other high dimentional optimization 
    methods?
    Its a heuristic so it's up to you. However, this subspace method must
    be used when trying to use any type of grid based method such as
    SafeOpt or StageOpt (see reference)

    Attributes
    ----------
    history : list
         List of result objects from each call of minimize()
    

    '''


    
    def __init__(self,**kwargs):
        self.kwargs = kwargs
        self.history = []
        
    def minimize(self, bounds, func, args = [], x0 = None):
        '''minimization function
        
        Uses LineOpt method to minimize a black box function
        
        Parameters
        ----------
        bounds : ndarray, shape (D, 2)
             Bounds of D-dimentional domain

        func : callable
             Function to be optimized, must be of the form f(x, *args)

        args : tuple, optional
             Arguments supplied to target function

        x0 : ndarray, shape (1,D)
            Initial guess point for optimization
        

        Returns
        -------
        res : Result
            Result object which stores the optima value and location

        '''


        opt = lineOpt.LineOpt(bounds,
                              func, args = args, x0 = x0,
                              **self.kwargs)
        opt.optimize()
        res = Result(opt.x[-1], opt.f[-1])
        self.history += [res]
        
        return res

class ParallelLineOpt(BlackBoxOptimizer):
    '''ParallelLineOpt - parallelized version of lineopt

    Uses multiprocessing to simultaniously try to find
    localized maxima using a collection of different initial
    starting locations.

    Attributes
    ----------
    
    n_cpus : int
        Number of cpus used in parallelization
    
    kwargs : dict
        Optional argmuents for LineOpt instance

    '''
    def __init__(self,**kwargs):
        self.n_cpus = kwargs.get('n_cpus',
                                 multiprocessing.cpu_count())
        self.kwargs = kwargs

    def minimize(self, bounds, f, args = [], x0 = None):
        '''minimize - performs parallelized minimization

        Parameters
        ----------
        bounds : ndarray, shape (n,2)
            Upper and lower bounds for each input variable

        f : callable
            Function of the form f(x, *args) to be minimized

        args : list, optional
            Optional arguments for f, Default: []

        x0 : ndarray, shape (m,n), optional
            Set of initial guesses, if not given, 10 points are
            randomly selected inside input space
        '''
        
        n_points = 10
        dim = bounds.shape[0]
        logging.info(bounds)
        
        if x0 is None:
            x0 = np.random.uniform(bounds[:,0],
                                   bounds[:,1],
                                   (n_points,dim))

        else:
            if len(x0) < self.n_cpus:
                #add in random points to efficiently use resources
                additional_points = np.random.uniform(bounds[:,0],
                                                      bounds[:,1],
                                                      (self.n_cpus - len(x0) - 1,dim))
                x0 = np.vstack((x0,additional_points))
            
        #create list of parameters
        l = [[bounds,f,args,x0[i]] for i in range(len(x0))]

        logging.info(f'Using parallel LineOptimization with {len(x0)} initial points')
        p = multiprocessing.Pool(self.n_cpus)
        result = p.starmap(self._parallel_minimize,l)
        p.close()
        p.join()

        #return the point that most minimizes the function
        i = np.argmax(np.array(result).T[1])
        return Result(*result[i])
        
    def _parallel_minimize(self, bounds, func, args, x0):
        '''function called in multiprocessing Pool class'''
        opt = lineOpt.LineOpt(bounds,func,args = args, x0 = x0, **self.kwargs)
        opt.optimize()
        return [opt.x[-1],opt.f[-1]]
